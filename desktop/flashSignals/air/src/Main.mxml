<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication
 	title="Socialtext - Login" status="flairSignals {appVersion}" xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" verticalAlign="bottom" minWidth="500" minHeight="385" creationComplete="onAppInit()" fontFamily="Arial">
	<mx:Script>
		<![CDATA[
import com.serialization.json.JSON;

import flash.net.*;
import flash.system.Capabilities;
import managers.ConfigManager;
import org.audreyt.Utils.Emoticon;
import mx.collections.ArrayCollection;
import mx.collections.Sort;
import mx.collections.SortField;

private function REST ():* {
	return htmSignalAll.htmlLoader.window;
}

public var wantPopup:Boolean = true;
public var wantUpdate:Boolean = true;
public var popupKeywords:String = "";
public var popupPlace:String = "topRight";

[Bindable]
public var places:Array = ["topRight", "topLeft", "bottomRight", "bottomLeft"];

[Bindable]
public var updateInterval:int = 10;

[Bindable]
public var Watchlist:ArrayCollection = new ArrayCollection([]);

[Bindable]
public var Watchers:ArrayCollection = new ArrayCollection([]);

[Bindable]
public var PersonWatchlist:ArrayCollection = new ArrayCollection([]);

[Bindable]
public var PersonWatchers:ArrayCollection = new ArrayCollection([]);

[Bindable]
public var PeopleList:ArrayCollection = new ArrayCollection([]);

public var myId:String = "";
public var myBestFullName:String = "";
public var myName:String = "";
public var myPassword:String = "";
public var myServer:String = "";
public var Timestamp:String;

public var SignalClock:Timer;
public var FeedClock:Timer;
public var NetworkClock:Timer;

private function getConfig(key:String, def:String=""):String {
	return ConfigManager.getConfig(key, def);
}

private function getServerConfig(key:String, def:String=""):String {
	return getConfig(serverKey(key), def);
}

private function setConfig(key:String, val:String):void {
	ConfigManager.setConfig(key, val);
}

private function setServerConfig(key:String, val:String):void {
	setConfig(serverKey(key), val);
}

private function serverKey(key:String):String {
	return "Server-"+myServer+"-"+myName+"-"+key;
}

private function onAppInit():void {
	wantPopup = (getConfig("wantPopup", "true") == "true");
	wantUpdate = (getConfig("wantUpdate", "true") == "true");
	popupKeywords = getConfig("popupKeywords", "");
	popupPlace = getConfig("popupPlace", "topRight");

	myName = InputName.text = getConfig("myName", "");
	myPassword = InputPassword.text = getConfig("myPassword", "");
	myServer = InputServer.text = getConfig("myServer", "https://www2.socialtext.net/");

	NetworkClock = new Timer(Number(getConfig("networkClock", "600000")), 0);
	FeedClock = new Timer(Number(getConfig("feedClock", "60000")), 0);
	SignalClock = new Timer(Number(getConfig("signalClock", "10000")), 0);

	htmSignalAll.addEventListener(Event.HTML_DOM_INITIALIZE, domInitialized);
	htmSignalAll.location = "HTML.html?" + Number(new Date()).toString();
	addKeyHandler();
	
	this.purr = new Purr(15);

	NativeApplication.nativeApplication.addEventListener( Event.EXITING, 
		function(e:Event):void {
			var opened:Array = NativeApplication.nativeApplication.openedWindows;
			for (var i:int = 0; i < opened.length; i ++) {
				opened[i].close();
			}
	});	
}

private function onUpdate(event:UpdateEvent):void {
	appUpdater.checkNow(); // Go check for an update now
}

private function addKeyHandler():void {
	if (stage != null) {
		stage.addEventListener(KeyboardEvent.KEY_UP, shorcutHandler);
	}
	else {
		callLater(addKeyHandler);
	}
}

private function shorcutHandler(event:KeyboardEvent):void {
	if (!Timestamp) { return }
	if (event.altKey || event.ctrlKey || event.commandKey) {
		switch (event.keyCode) {
			case 49: {
				Input.text = "";
				displayView(btnSignals, SignalView);
				break;
			}
			case 50: {
				Input.text = "";
				displayView(btnActivity, ActivityView);
				break;
			}
			case 51: {
				Input.text = "";
				event.preventDefault();
				displayView(btnPeople, PeopleView);
				break;
			}
			case 52: {
				Input.text = "";
				event.preventDefault();
				displayView(btnNetwork, NetworkView);
				break;
			}
		}
		event.stopPropagation();
	}
}
private function domInitialized(event:Event):void {
	htmSignalAll.htmlLoader.placeLoadStringContentInApplicationSandbox = true;

	REST().getPerson = getPerson;
	REST().gotPeople = gotPeople;
	REST().gotSignals = gotSignals;
	REST().refreshSignals = refreshSignals;
	REST().loginSuccess = loginSuccess;
	REST().loginFailure = loginFailure;
	REST().startTimer = startTimer;
	REST().refreshPersonWatchlist = refreshPersonWatchlist;
	REST().navigateTo = function(url:String):void{
		var request:URLRequest = new URLRequest(url);
		navigateToURL(request,"_blank");
	};

	LoginPanel.visible = true;

	callLater(initAppUpdater);
}

private function initAppUpdater():void {
	setApplicationVersion(); 

	// Check for updates every day
	appUpdater.updateURL = "http://topaz.socialtext.net/~audreyt/flashSignals/update.xml";
	appUpdater.isCheckForUpdateVisible = false;
	if (wantUpdate) {
		appUpdater.delay = 24 * 60 * 60 * 1000;
		appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);
	}
	appUpdater.initialize();
}

private function loginFailure ():void {
	LoginPanel.enabled = true;	
}

[Bindable]
[Embed(source="icons/socialtext-32.png")]
private var notifyIcon:Class;

[Bindable]
[Embed(source="icons/signal-32.png")]
private var signalIcon:Class;
private function notify (title:String, htmlText:String, icon:Class=null):void {
	if (!this.purr) return;
	if (!wantPopup) return;
	try {
		var n:Notification = new Notification(title, htmlText, null, 7, new icon);
		n.htmlText = htmlText;
		n.position = popupPlace;
		n.width = 200;
		this.purr.addNotification(n);
	} catch (e:*) {}
}

private function loginSuccess (signals:*):void {
	LoginPanel.visible = false;
  	Entry.visible = true;
	Input.setFocus();		

	NetworkClock.start();
	NetworkClock.addEventListener(TimerEvent.TIMER, onNetworkTick);

	FeedClock.start();
	FeedClock.addEventListener(TimerEvent.TIMER, onFeedTick);

	SignalClock.start();
	SignalClock.addEventListener(TimerEvent.TIMER, onSignalTick);

	myId = getServerConfig("myId");
	myBestFullName = getServerConfig("myBestFullName");

	REST().getPeople(myServer + '/data/people/' + encodeURIComponent(myName) + '/watchlist', myName, myPassword, Watchlist, true);
	gotSignals(signals, false);
	displayView(btnSignals, SignalView, true);

	getPersonPanels(myName);

	REST().getHTML(myServer + '/data/events/conversations/' + encodeURIComponent(myName), myName, myPassword, gotHTML(htmActivityConversations));
	REST().getHTML(myServer + '/data/events/followed/' + encodeURIComponent(myName), myName, myPassword, gotHTML(htmActivityColleagues));
	REST().getHTML(myServer + '/data/events/activities/' + encodeURIComponent(myName), myName, myPassword, gotHTML(htmActivityMine), {event_class: 'page'});
	REST().getHTML(myServer + '/data/events/activities/' + encodeURIComponent(myName), myName, myPassword, gotHTML(htmSignalMine, removeRealNameAndAssetIcon), { event_class: 'signal' });

	REST().getPeople(myServer + '/data/people/' + encodeURIComponent(myName) + '/watchers', myName, myPassword, Watchers);
	REST().getPeople(myServer + '/data/people', myName, myPassword, PeopleList);
	REST().getHTML(myServer + '/data/events', myName, myPassword, gotHTML(htmActivityAll), {event_class: 'page', contributions: '1'});

	notify("Login successful!", "Checking for new signals every " + Math.round(SignalClock.delay / 1000).toString() + " seconds.", notifyIcon);
}

private function gotHTML(html:*, callback:Function=null):Function {
	return function(feed:String):void {
		if (callback != null) {
			feed = callback(feed);
		}
		gotFeed(html, feed);
	};
}

[Bindable]
private var previousName:String;
private var previousId:String;

private function getPersonPanels (id:String):void {
	if (previousId == id) return;
	previousId = id;
	
	if (id == myName || id == myId) {
		PersonFollowCheckbox.selected = true;
		PersonFollowCheckbox.enabled = false;
		PersonFollowCheckbox.label = "Follow updates from myself";
		NetworkPanelLeft.styleName = "Myself";
		NetworkPanelRight.styleName = "Myself";
	}
	else {
		PersonFollowCheckbox.selected = Watchlist.toArray().some(
 		function (element:*, index:int, arr:Array):Boolean {
        	return (element.user_id == previousId);
	    }
	)
		PersonFollowCheckbox.label = "Follow updates from " + previousName;

		PersonFollowCheckbox.enabled = true;
		NetworkPanelLeft.styleName=""
		NetworkPanelRight.styleName=""
		
	}
	
	PersonActivities.location='Loading.html?' + Math.random().toString();
	REST().getHTML(myServer + '/data/events/activities/' + encodeURIComponent(id), myName, myPassword, gotHTML(
		PersonActivities, removeRealName
	));
	PersonWatchlist.removeAll();
	PersonWatchers.removeAll();
	PersonProfile.location = 'Profile.html?' + Math.random().toString();
	REST().getPeople(myServer + '/data/people/' + encodeURIComponent(id) + '/watchlist', myName, myPassword, PersonWatchlist);

	REST().getPeople(myServer + '/data/people/' + encodeURIComponent(id) + '/watchers', myName, myPassword, PersonWatchers);

	REST().getData(myServer + '/data/people/' + encodeURIComponent(id), myName, myPassword, 
	
	
	function(data:*):void {
		var profile:Object = data as Object;
		
		if (profile.email && profile.email == myName) {
			setServerConfig("myId", myId = profile.id);	
			setServerConfig("myBestFullName", myBestFullName = profile.best_full_name);	
		}
		PersonProfile.htmlLoader.window.fill_out_profile(
			profile
		);
		htmlComplete(PersonProfile);
	});
}

static private function removeRealName (feed:String):String {
	return feed.replace(/<a class="realName".*?<\/a>/g, '<!-- realName -->')
			   .replace(/<a href(=".*?">\s*<img .*?>\s*<\/a>)/g, '<a name$1');
}

static private function removeRealNameAndAssetIcon (feed:String):String {
	return removeRealName(feed).replace(
		/(<img\s+class="asset-icon"[^>]*>)/g, '<!-- assetIcon -->'
	);
}

private function refreshPersonWatchlist (id:String):void {
	REST().getHTML(myServer + '/data/events/followed/' + encodeURIComponent(myName), myName, myPassword, gotHTML(htmActivityColleagues));
}

public function getPerson (id:String, name:String=null):void {
	this.title = "Socialtext - " + (name || "Myself");
	previousName = name;
	getPersonPanels(id);
	displayView(null, NetworkView);
}
import managers.ImageCacheManager;

[Bindable]
private var imageCache:ImageCacheManager = ImageCacheManager.getInstance();

private function gotFeed (html:*, feed:String):void {
	if (feed && feed.length > 0) {
		html.htmlLoader.placeLoadStringContentInApplicationSandbox = true;
	feed = feed.replace(/<head>/, '<head><style>' + 
			'a[href] img:hover { width: 31px; height: 31px; padding-bottom: 0px; padding-top: 0px } } ' + 
			'a[href] img { padding-bottom: 2px; padding-top: 2px; } ' +
			'tr.small { font-size: 11px !important }'+ 
			'tbody { font-size: 12px; font-family: Arial } </style><base href="' + myServer + '">')
			   .replace(/<td /g, '<td style="padding-bottom: 5px;border-bottom: 1px solid #999"')
			   .replace(/\/\?profile\/(\d+)"><img /g, 'person:$1"><img alt="$1" ') //'
			   .replace(
			   /(<a \w+="person:.*?<\/a>)(<!-- assetIcon -->|<img class="asset-icon".*?>)\s*(<!-- realName -->|<a class="realName".*?<\/a>) (.*?)\(<span class="ago_text">(.*?)<\/span>\)/g, //"
			    '<table width="100%" border=0 cellpadding=0 cellspacing=1><tr class="small" valign=top><td width="30" rowspan=2>' + 
			    '$1</td><td>$3 ' + 
			    '<em class="ago_text" style="font-style: italics; color: #666666">' +
			    '$5</em></td><td align="right" width="30">$2</td></tr><tr><td style="text-align: left" colspan="2">$4</td></tr></table>')
			   .replace(/<a /g, '<a style="text-decoration: none" target="_blank" ')
			   .replace(/<img style="border:none" /g, '<img style="float: left; padding-right: 4px; border:none; width: 27px; height: 27px" ')
			   .replace(/<img class="asset-icon" /g, '<img class="asset-icon" style="float: right; padding-left; 4px; width: 16px; height: 16px" ')
			   .replace(/src="([^"]+)"\s*\/>/g, function(_1:*, url:String, _2:*, _3:*):String {
			   		return 'src="'+ImageCacheManager.getInstance().getImageByURL(
			   		(myServer+url)
			   		)+'" />';
			   	})
			   .replace(/<tbody>\s*<\/tbody>/, '<tbody><tr><td><em>No recent events found.</em></td></tr></tbody>');
	html.htmlText = feed;
	}
}

private function htmlComplete(html:*):void {
	var anchors:* = html.htmlLoader.window.document.getElementsByTagName("a");
	if (anchors != null)
	for (var i:Number=0; i < anchors.length; i++) {
		if (!anchors[i].href) continue;
		anchors[i].onmouseup = function():void {
			var elm:* = arguments[0].srcElement;
			if (elm.alt) {
				getPerson(elm.alt, elm.parentNode.parentNode.nextSibling.firstChild.innerText); // , elm.parentNode.nextSibling.nextSibling.nextSibling.innerText);
			}
			else {
				var request:URLRequest = new URLRequest(elm);
				navigateToURL(request,"_blank");
			}
		};
	}
}
private function gotPeople (col:ArrayCollection, people:*):void {
	var ar:Array = people as Array;
	for each(var s:Object in ar) {
		col.addItem({
			getPerson: getPerson,
			user_id: s.id,
			name: s.best_full_name,
			img: myServer + '/data/people/' + s.id + '/small_photo',
			profile: myServer + '/?profile/' + s.id,
			email: s.email
		});
	}
}

private var oldSignals:Array = [];
private function gotSignals (signals:*, showNotification:Boolean=true):void {
	try {
		var ar:Array = signals as Array;

		var myTimestamp:String = Timestamp;
     	
     	for each(var s:Object in ar.reverse()) {
     		if (oldSignals.some(function (element:*, index:int, arr:Array):Boolean {
        		return (element.at == s.at && element.user_id == s.user_id);
	    	})) continue; // De-duplication
	    	
	    	var signalObject:Object = {
				user: s.best_full_name,
				at: s.at,
				text: Emoticon.replaceEmoticon(
					  s.body.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')
							.replace(/^\/me\s+/, '<EM style="color: #004400">')
							.replace(/(@\S+)/g, '<span style="font-weight: bold">$1</span>')
							.replace(/(https?:\S+)/g, '</FONT><A target="_blank" style="text-decoration: none" href="$1">$1</A><FONT color="#000000">')
							.replace(/\{\s*bz:\s*(\d+)\s*\}/g, '<a style="color: #4183c4" href="https://bugs.socialtext.net:555/show_bug.cgi?id=$1">$&</a>')
				),
				user_id: s.user_id,
				img: ImageCacheManager.getInstance().getImageByURL(
					myServer + '/data/people/' + s.user_id + '/photo'
				),
				profile: myServer + '/?profile/' + s.user_id	    		
	    	};

var ary:Array = Watchlist.toArray();
	    	if (Watchlist.toArray().some(
		 		function (element:*, index:int, arr:Array):Boolean {
		        	return (element.user_id == s.user_id);
			    }
			)) {
				htmSignalColleagues.htmlLoader.window.addSignalEntry(signalObject);
			}

	    	REST().addSignalEntry(signalObject);
	    	
	    	if (s.user_id == myId) {
	    		REST().scrollToTop();
	    	}
	    	/*
			Signals.addItemAt({
				user: s.best_full_name,
				at: s.at,			
				text: Emoticon.replaceEmoticon(
					  s.body.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')
							.replace(/^\/me\s+/, '<EM style="color: #004400">')
							.replace(/(@\S+)/g, '<span style="font-weight: bold">$1</span>')
							.replace(/(https?:\S+)/g, '</FONT><A target="_blank" style="text-decoration: none" href="$1">$1</A><FONT color="#000000">')
							.replace(/\{\s*bz:\s*(\d+)\s*\}/g, '<a style="color: #4183c4" href="https://bugs.socialtext.net:555/show_bug.cgi?id=$1">$&</a>')
				),
				user_id: s.user_id,
				img: myServer + '/data/people/' + s.user_id + '/photo',
				profile: myServer + '/?profile/' + s.user_id
			}, 0);
			*/
			
			oldSignals.push({
				user_id: s.user_id,
				at: s.at
			});
			
			myTimestamp = s.at;

			if (showNotification && s.user_id != myId) {
				var keywords:Array = popupKeywords.split(/[\s,]+/);
				var wantNotify:Boolean = (keywords.length == 0);
				
				for each (var key:String in keywords) {
					if (s.body.toLowerCase().search(key.toLowerCase()) >= 0) {
						wantNotify = true;
						break;
					}
				}
				
				if (wantNotify) {
					notify(
						s.best_full_name + ":",
						s.body.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')
							  .replace(/^\/me\s+/, '<EM style="color: #004400">'),
						signalIcon
					)
				}
			}
		}

		REST().updateTimestamps();

		if (Timestamp != myTimestamp) {
			Timestamp = myTimestamp;
			doScroll();
		}
	} catch (e:*) {}

	startTimer();
}

private function startTimer():void {
	SignalClock.reset();
	SignalClock.start();
}

private function securityError(evt:Event):void {
	trace(evt.toString());
}

private function doScroll():void {
// 	List.verticalScrollPosition=0;
}

private function displayView(target:Button, view:*, forced:Boolean=false):void {
	if (target && !target.enabled && !forced) { return; }
	if (target) this.title = "Socialtext - " + target.toolTip.replace(/ \(.*/, '').replace(/Log out/, 'Login');
	for each (var b:Button in [btnLogout, btnActivity, btnPeople, btnSignals, btnNetwork]) {
        if (b == target) {
			b.styleName = "DisabledButton";
			b.enabled = false;
		}
        else if (target == btnLogout) {
			b.enabled = false;
		}
		else {
			b.styleName = "";
			b.enabled = true;
		}
	}
	showView(view);
}

private function showView(view:*):void {
	for each (var v:Canvas in [NetworkView, SignalView, ActivityView, PeopleView, NetworkView]) {
		if (v != view) {
			v.visible = false;
		}
	}
	view.visible = true;
	view.enabled = true;
}

private function login():void {	
	myName = InputName.text;
	myPassword = InputPassword.text;
	myServer = InputServer.text.replace(/\/+$/, '');

	setConfig("myName", myName);
	setConfig("myServer", myServer);
	setConfig("myPassword", myPassword);

  	LoginPanel.enabled = false;
  	REST().doLogin(myServer, myName, myPassword);
}

private function onFeedTick (evt:*):void {
	REST().getHTML(myServer + '/data/events/conversations/' + encodeURIComponent(myName), myName, myPassword, gotHTML(htmActivityConversations));
	REST().getHTML(myServer + '/data/events/followed/' + encodeURIComponent(myName), myName, myPassword, gotHTML(htmActivityColleagues));
	REST().getHTML(myServer + '/data/events/activities/' + encodeURIComponent(myName), myName, myPassword, gotHTML(htmSignalMine, removeRealNameAndAssetIcon), { event_class: 'signal' });
	REST().getHTML(myServer + '/data/events/activities/' + encodeURIComponent(myName), myName, myPassword, gotHTML(htmActivityMine), {event_class: 'page'});
	REST().getHTML(myServer + '/data/events', myName, myPassword, gotHTML(htmActivityAll), {event_class: 'page', contributions: '1'});
}

private function onNetworkTick (evt:*):void {
	REST().getPeople(myServer + '/data/people/' + encodeURIComponent(myName) + '/watchlist', myName, myPassword, Watchlist);
	REST().getPeople(myServer + '/data/people/' + encodeURIComponent(myName) + '/watchers', myName, myPassword, Watchers);
}

private function onBtnLogout (target:*):void {
	Entry.visible = false;
	oldSignals = [];
	Watchlist.removeAll();
	Watchers.removeAll();
	NetworkClock.reset();
	FeedClock.reset();
	SignalClock.reset();
	displayView(target as Button, LoginPanel, true);
}

private function onSignalTick (evt:*):void {
	refreshSignals();
}

private function refreshSignals():void {
	SignalClock.reset();
	REST().getSignals(myServer, myName, myPassword, Timestamp);
	startTimer();
}

private function postSignal():void {
	if (Input.text.length == 0) { return; }
	REST().postSignal(myServer, myName, myPassword, Input.text);
	Input.text = "";
}

private function keyPressed():void {
//	Len.text = (140 - Input.text.length).toString();
}

		]]>

	</mx:Script>
	<mx:Style>
		.Entry { borderStyle: applicationControlBar; fillColors: #55759E, #54627D; fillAlphas: 1, 1; highlightAlphas: 0, 0; }
		.View { borderStyle: applicationControlBar; fillColors: #54627D, #55759E; fillAlphas: 1, 1; highlightAlphas: 0, 0; }
		.View2 { borderStyle: applicationControlBar; fillColors: #ffffff, #ffffff; fillAlphas: 1, 1; highlightAlphas: 0, 0; }
		.List { borderStyle: applicationControlBar; fillColors: #ffffff, #ffffff; fillAlphas: 1, 1; highlightAlphas: 0, 0; }
		.DisabledButton {  fillColors: #aaccdd, #88aabb; fillAlphas: 0.5, 0.5; }
	</mx:Style>
	<mx:Fade id="showTab" alphaFrom="0.75" alphaTo="1" duration="150" />
	<mx:Fade id="hideTab" alphaFrom="1" alphaTo="0.75" duration="150" />

	<mx:Parallel id="showEffectsLoginPanel" effectEnd="InputName.setFocus()">
		<mx:Fade alphaFrom="0.01" alphaTo="1" duration="500" />
	</mx:Parallel>
	<mx:Parallel id="showEffects" effectEnd="Input.setFocus()">
		<mx:Fade alphaFrom="0.01" alphaTo="1" duration="500" />
		<mx:Blur duration="500" blurXFrom="10.0" blurXTo="0.0" blurYFrom="10.0" blurYTo="0.0"/>
	</mx:Parallel>
	<mx:Parallel id="hideView">
		<mx:Fade alphaFrom="1" alphaTo="0.01" duration="500" />
	</mx:Parallel>
	<mx:Parallel id="hideEffects" effectEnd="Input.setFocus()">
		<mx:Fade alphaFrom="1" alphaTo="0" duration="500"/>
	  	<mx:Zoom zoomWidthFrom="1.0" zoomWidthTo="0.01" zoomHeightFrom="1.0" zoomHeightTo="0.01" duration="500" />
	</mx:Parallel>
  	<mx:Canvas hideEffect="hideView"  showEffect="showEffects" id="Entry" styleName="Entry" cornerRadius="10"  backgroundAlpha="1.0" left="45" right="24" dropShadowColor="#777777" dropShadowEnabled="true" height="45" visible="false" top="0" enabled="true">
		<mx:TextInput tabIndex="4" focusEnabled="true"  enter="postSignal()" id="Input" right="40" bottom="10" top="10" left="10" cornerRadius="3" fontFamily="Arial" fontSize="12" borderStyle="inset" fontAntiAliasType="normal"  maxChars="140" change="keyPressed();" />
		<mx:Button alpha="1" icon="@Embed(source='icons/tick.png')" width="24" fontFamily="Arial" fontSize="10" color="black" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" bottom="8" right="10" height="16" click="postSignal();" fillAlphas="[0.9, 0.9, 0.8, 0.8]" fillColors="[#DDDDDD, #BBBBBB]"/>
		<mx:Label width="24" right="10" top="5" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" fontFamily="Arial" textAlign="center" color="#D0D0D0" id="Len" text="{140-Input.text.length}"/>
	</mx:Canvas>
	<mx:Canvas visible="false" hideEffect="hideView" showEffect="showEffects" id="SignalView" styleName="View" left="0" right="0" bottom="0" top="45" cornerRadius="10">
		<mx:ViewStack creationPolicy="all" selectedIndex="0" left="10" right="10" top="10" bottom="32"  id="SignalStack" cornerRadius="3">
			<mx:Canvas hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="All" id="cvsSignalAll" cornerRadius="3">
				<mx:HTML horizontalScrollPolicy="auto" verticalScrollPolicy="auto" backgroundColor="#ffffff" location="HTML.html" styleName="HTML" backgroundAlpha="1" left="0" top="0" right="0" bottom="0" enabled="true" id="htmSignalAll" focusEnabled="true"></mx:HTML>			
			</mx:Canvas>
			<mx:Canvas hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="Mine" id="cvsSignalMine" cornerRadius="3">
				<mx:HTML horizontalScrollPolicy="auto" verticalScrollPolicy="auto" backgroundColor="#ffffff" location="HTML.html" styleName="HTML" backgroundAlpha="1" left="0" top="0" right="0" bottom="0" enabled="true" id="htmSignalMine" focusEnabled="true"></mx:HTML>			
			</mx:Canvas>
			<mx:Canvas hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="My Colleagues" id="cvsSignalColleagues" cornerRadius="3">
				<mx:HTML horizontalScrollPolicy="auto" verticalScrollPolicy="auto" backgroundColor="#ffffff" location="HTML.html" styleName="HTML" backgroundAlpha="1" left="0" top="0" right="0" bottom="0" enabled="true" id="htmSignalColleagues" focusEnabled="true"></mx:HTML>			
			</mx:Canvas>
		</mx:ViewStack>
		<mx:ToggleButtonBar dataProvider="SignalStack" fontFamily="Arial" fontSize="10" paddingBottom="0" paddingTop="0" bottom="8" left="10" fontWeight="normal" rotation="0" color="#000000">
		</mx:ToggleButtonBar>
		<mx:Button label="Refresh" right="10" bottom="5" visible="false"/>
		<mx:Button label="Clear" right="75" bottom="5" visible="false"/>
	</mx:Canvas>
	<mx:Panel visible="false" showEffect="showEffectsLoginPanel" hideEffect="hideEffects" width="360" height="160" layout="absolute" horizontalCenter="0" verticalCenter="0" title="Connect to Socialtext" fontSize="12" enabled="true" id="LoginPanel" defaultButton="{Login}">
		<mx:Label fontSharpness="400" fontAntiAliasType="advanced" fontGridFitType="pixel" y="10" text="User ID" fontSize="12" textAlign="right" width="72" left="5"/>
		<mx:Label text="Password" fontSize="12" textAlign="right" width="72" left="5" top="40"/>
		<mx:Label text="Server" fontSize="12" textAlign="right" width="72" left="5" bottom="16"/>
		<mx:Button styleName="LoginButton" tabIndex="3" label="Login" fontSize="11" right="10" y="38" id="Login" click="login()" icon="@Embed(source='icons/connect.gif')"/>
		<mx:TextInput text="" tabIndex="1" y="10" width="248" fontSize="11" right="10" displayAsPassword="false" editable="true" enabled="true" id="InputName" focusEnabled="true"/>
		<mx:TextInput text="" tabIndex="2" width="163" fontSize="11" right="95" editable="true" enabled="true" id="InputPassword" focusEnabled="true" displayAsPassword="true" top="39"/>
		<mx:TextInput tabIndex="4" bottom="16" width="248" text="https://www2.socialtext.net" fontSize="11" right="10" editable="true" id="InputServer" focusEnabled="true"/>
		<mx:HRule x="10" y="69" width="320" height="4"/>
		</mx:Panel>
	<mx:Canvas width="45" height="45" left="0" top="0">
		<mx:Button id="btnActivity" x="21" y="0" width="22" height="22" toolTip="Activity (Ctrl-2)" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" icon="@Embed(source='icons/comment-16.png')"  click="displayView(event.target as Button, ActivityView);" enabled="false"/>
		<mx:Button id="btnPeople" x="0" y="22" label="Button" width="22" height="22" icon="@Embed(source='icons/group.gif')" toolTip="People (Ctrl-3)" click="displayView(event.target as Button, PeopleView);" enabled="false"/>
		<mx:Button id="btnSignals" x="0" y="0" label="Button" width="22" height="22" icon="@Embed(source='icons/signal-20.png')" toolTip="Signals (Ctrl-1)" click="displayView(event.target as Button, SignalView);" enabled="false"/>
		<mx:Button id="btnNetwork" x="21" y="22" label="Button" width="22" height="22" icon="@Embed(source='icons/heart.png')" toolTip="Myself (Ctrl-4)" click="
		getPersonPanels(myName);
		displayView(event.target as Button, NetworkView);" enabled="false"/>
	</mx:Canvas>

	<mx:Canvas visible="false" hideEffect="hideView" showEffect="showEffects" id="NetworkView" styleName="View" left="0" right="0" bottom="0" top="45" cornerRadius="10">
		<mx:ViewStack creationPolicy="all" selectedIndex="0" left="10" right="10" top="10" bottom="32"  id="NetworkStack" cornerRadius="3">
		<mx:Canvas backgroundColor="#ffffff" backgroundAlpha="1" hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="Activities" id="cvsNetworkActivities" cornerRadius="3">
			<mx:HTML fontSize="12" fontFamily="Arial" location="Loading.html" cornerRadius="5" id="PersonActivities" complete="htmlComplete(PersonActivities)" left="0" top="0" bottom="0" right="0"/>
		</mx:Canvas>
		<mx:Canvas backgroundColor="#ffffff" backgroundAlpha="1" hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="Network" id="cvsNetworkNetwork" cornerRadius="3">
			<mx:Panel id="NetworkPanelLeft" width="47%" layout="absolute" left="10" top="3" bottom="27" title="Following {PersonWatchlist.length} people" fontSize="15" color="#000000" cornerRadius="10" fontFamily="Arial">
				<mx:List selectionColor="#FFFFFF" rollOverColor="#FFFFFF" useRollOver="false"	 left="0" top="0" bottom="0" right="0" dataProvider="{PersonWatchlist}" itemRenderer="Person"></mx:List>
			</mx:Panel>
			<mx:Panel id="NetworkPanelRight" layout="absolute" top="3" right="10" bottom="27" width="47%" cornerRadius="10" title="{PersonWatchers.length} Followers" fontSize="15" color="#000000" fontFamily="Arial">
				<mx:List selectionColor="#FFFFFF" rollOverColor="#FFFFFF" useRollOver="false" left="0" top="0" bottom="0" right="0" dataProvider="{PersonWatchers}" itemRenderer="Person"></mx:List>
			</mx:Panel>
			<mx:CheckBox  fontFamily="Arial" fontSize="11" 
				click="
if (PersonFollowCheckbox.selected) {
	REST().followPerson(myServer, myName, myPassword, previousId);
	Watchlist.addItem({
		user_id: previousId
	});
	   var sort:Sort = new Sort();
     sort.fields = [new SortField('name',true)];
     PersonWatchers.sort = sort;
     
	PersonWatchers.addItem({
		getPerson: getPerson,
		user_id: myId,
		name: myBestFullName,
		img: myServer + '/data/people/' + myId + '/small_photo',
		profile: myServer + '/?profile/' + myId
	});
	PersonWatchers.refresh();
}

else {
	REST().unfollowPerson(myServer, myName, myPassword, previousId);
	var parr:Array = PersonWatchers.toArray();
	PersonWatchers.removeAll();
	for each (var pelm:Object in parr) {
		if (pelm.user_id == myId) continue;
		PersonWatchers.addItem(pelm);
	}
	PersonWatchers.refresh();
	var arr:Array = Watchlist.toArray();
	Watchlist.removeAll();
	for each (var elm:Object in arr) {
		if (elm.user_id == previousId) continue;
		Watchlist.addItem(elm);
	}

}

					"
				 id="PersonFollowCheckbox" bottom="0" right="10">
			</mx:CheckBox>
		</mx:Canvas>
		<mx:Canvas backgroundColor="#ffffff" backgroundAlpha="1" hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="Profile" id="cvsNetworkProfile" cornerRadius="3">
			<mx:HTML fontSize="12" fontFamily="Arial" location="Profile.html" cornerRadius="5" id="PersonProfile" left="10" top="10" bottom="10" right="10"/>
		</mx:Canvas>
		</mx:ViewStack>
		<mx:ToggleButtonBar dataProvider="NetworkStack" fontFamily="Arial" fontSize="10" paddingBottom="0" paddingTop="0" bottom="8" left="10" fontWeight="normal" rotation="0" color="#000000">
		</mx:ToggleButtonBar>

	</mx:Canvas>
	<mx:Canvas visible="false" hideEffect="hideView" showEffect="showEffects" id="PeopleView" styleName="View" left="0" right="0" bottom="0" top="45" cornerRadius="10">
		<mx:ViewStack creationPolicy="all" selectedIndex="0" left="10" right="10" top="10" bottom="32"  id="PeopleStack" cornerRadius="3">
			<mx:Canvas hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="My Colleagues ({Watchlist.length})" id="cvsPeopleWatchlist" cornerRadius="3">
				<mx:TileList selectionColor="#FFFFFF" rollOverColor="#FFFFFF" useRollOver="false"	 left="0" top="0" bottom="0" right="0" dataProvider="{Watchlist}" itemRenderer="Person"></mx:TileList>
			</mx:Canvas>
			<mx:Canvas hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="My Followers ({Watchers.length})" id="cvsPeopleWatchers" cornerRadius="3">
				<mx:TileList selectionColor="#FFFFFF" rollOverColor="#FFFFFF" useRollOver="false"	 left="0" top="0" bottom="0" right="0" dataProvider="{Watchers}" itemRenderer="Person"></mx:TileList>
			</mx:Canvas>
			<mx:Canvas hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="All ({(PeopleList.length > 0) ? PeopleList.length : 'loading...'})" id="cvsPeopleAll" cornerRadius="3">
				<mx:TileList selectionColor="#FFFFFF" rollOverColor="#FFFFFF" useRollOver="false"	 left="0" top="0" bottom="0" right="0" dataProvider="{PeopleList}" itemRenderer="Person"></mx:TileList>
			</mx:Canvas>
		</mx:ViewStack>
		<mx:ToggleButtonBar dataProvider="PeopleStack" fontFamily="Arial" fontSize="10" paddingBottom="0" paddingTop="0" bottom="8" left="10" fontWeight="normal" rotation="0" color="#000000">
		</mx:ToggleButtonBar>
	</mx:Canvas>
	<mx:Canvas visible="false" hideEffect="hideView" showEffect="showEffects" id="ActivityView" styleName="View" left="0" right="0" bottom="0" top="45" cornerRadius="10">
		<mx:ViewStack creationPolicy="all" selectedIndex="0" left="10" right="10" top="10" bottom="32"  id="ActivityStack" cornerRadius="3">
			<mx:Canvas hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="My Conversations" id="cvsActivityConversations" cornerRadius="3">
				<mx:HTML complete="htmlComplete(htmActivityConversations)" horizontalScrollPolicy="auto" verticalScrollPolicy="auto" backgroundColor="#ffffff" location="Loading.html" styleName="HTML" backgroundAlpha="1" left="0" top="0" right="0" bottom="0" enabled="true" id="htmActivityConversations" focusEnabled="true"></mx:HTML>			
			</mx:Canvas>
			<mx:Canvas hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="My Colleagues" id="cvsActivityColleagues" cornerRadius="3">
				<mx:HTML complete="htmlComplete(htmActivityColleagues)" horizontalScrollPolicy="auto" verticalScrollPolicy="auto" backgroundColor="#ffffff" location="Loading.html" styleName="HTML" backgroundAlpha="1" left="0" top="0" right="0" bottom="0" enabled="true" id="htmActivityColleagues" focusEnabled="true"></mx:HTML>			
			</mx:Canvas>
			<mx:Canvas hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="Mine" id="cvsActivityMine" cornerRadius="3">
				<mx:HTML horizontalScrollPolicy="auto" verticalScrollPolicy="auto" backgroundColor="#ffffff" location="Loading.html" styleName="HTML" backgroundAlpha="1" left="0" top="0" right="0" bottom="0" enabled="true" id="htmActivityMine" focusEnabled="true"></mx:HTML>			
			</mx:Canvas>
			<mx:Canvas hideEffect="hideTab" showEffect="showTab" left="0" right="0" top="0" bottom="0" label="All" id="cvsActivityAll" cornerRadius="3">
				<mx:HTML horizontalScrollPolicy="auto" verticalScrollPolicy="auto" backgroundColor="#ffffff" location="Loading.html" styleName="HTML" backgroundAlpha="1" left="0" top="0" right="0" bottom="0" enabled="true" id="htmActivityAll" focusEnabled="true"></mx:HTML>			
			</mx:Canvas>
		</mx:ViewStack>
		<mx:ToggleButtonBar dataProvider="ActivityStack" fontFamily="Arial" fontSize="10" paddingBottom="0" paddingTop="0" bottom="8" left="10" fontWeight="normal" rotation="0" color="#000000">
		</mx:ToggleButtonBar>
	</mx:Canvas>
	<mx:Canvas width="23" height="45" top="0" right="0">
		<mx:Button styleName="DisabledButton" id="btnLogout" x="0" y="0" label="Button" width="22" height="22" icon="@Embed(source='icons/disconnect.gif')" toolTip="Log out" click="onBtnLogout(event.target)" enabled="false"/>
		<mx:Button id="btnSettings" x="0" y="22" label="Button" width="22" height="22" icon="@Embed(source='icons/wrench.gif')" toolTip="Settings" click="
		txtSignal.text = Math.round(SignalClock.delay / 1000).toString();
		txtFeed.text = Math.round(FeedClock.delay / 1000).toString();
		txtNetwork.text = Math.round(NetworkClock.delay / 1000).toString();
		chkWantPopup.selected = wantPopup;
		chkWantUpdate.selected = wantUpdate;
		txtPopupKeywords.text = popupKeywords.replace(/^\s+/, '').replace(/\s+$/, '');
		selPopupPlace.selectedItem = popupPlace;
		Settings.visible = true;
		" enabled="true"/>
	</mx:Canvas>
	<mx:Panel visible="false" hideEffect="hideView" showEffect="showEffects" id="Settings" width="306" height="304" layout="absolute" horizontalCenter="0" verticalCenter="0" title="Settings" fontSize="12" alpha="0.9" backgroundAlpha="1" borderAlpha="1">
		<mx:Button label="OK" fontSize="11" icon="@Embed(source='icons/accept.gif')" labelPlacement="right" fontFamily="Arial" alpha="1" click="Settings.visible=false;
		setConfig('signalClock', (SignalClock.delay = Number(txtSignal.text) * 1000).toString());
		setConfig('feedClock', (FeedClock.delay = Number(txtFeed.text) * 1000).toString());
		setConfig('networkClock', (NetworkClock.delay = Number(txtNetwork.text) * 1000).toString());
		setConfig('wantPopup', ((wantPopup = chkWantPopup.selected) ? 'true' : 'false'));
		setConfig('wantUpdate', ((wantUpdate = chkWantUpdate.selected) ? 'true' : 'false'));
		setConfig('popupKeywords', (popupKeywords = txtPopupKeywords.text));
		setConfig('popupPlace', (popupPlace = selPopupPlace.selectedItem as String));
		NetworkClock.reset(); NetworkClock.start();
		FeedClock.reset(); FeedClock.start();
		SignalClock.reset(); SignalClock.start();
		" right="99" bottom="10"/>
		<mx:Button click="appUpdater.checkNow()" label="Check now" fontSize="11" labelPlacement="right" fontFamily="Arial" alpha="1"  right="10" bottom="66" width="81" paddingLeft="0" paddingRight="0"/>
		<mx:Button label="Cancel" fontSize="11" icon="@Embed(source='icons/cancel.gif')" labelPlacement="right" fontFamily="Arial" alpha="1" click="Settings.visible=false" right="10" bottom="10"/>
		<mx:Label x="10" y="10" text="Signals:"/>
		<mx:Label x="10" y="38" text="Activities:"/>
		<mx:Label x="10" y="66" text="Followers:"/>
		<mx:TextInput id="txtSignal" y="8" width="50" right="71"/>
		<mx:TextInput id="txtFeed" y="36" width="50" right="71"/>
		<mx:TextInput id="txtNetwork" y="64" width="50" right="71"/>
		<mx:Label y="10" text="seconds" right="10"/>
		<mx:Label y="10" text="Check every" right="129"/>
		<mx:Label y="38" text="Check every" right="129"/>
		<mx:Label y="66" text="Check every" right="129"/>
		<mx:Label y="135" text="Filter by keywords:" right="129"/>
		<mx:Label y="38" text="seconds" right="10"/>
		<mx:Label y="66" text="seconds" right="10"/>
		<mx:CheckBox id="chkWantPopup" x="10" y="105" label="New signals pop up at:"/>
		<mx:CheckBox id="chkWantUpdate" x="10" y="175" label="Check for updates on launch"/>
		<mx:TextInput y="133" width="119" id="txtPopupKeywords" right="10"/>
		<mx:HRule y="95" width="278" horizontalCenter="0"/>
		<mx:HRule y="164" width="278" horizontalCenter="0"/>
		<mx:HRule y="204" width="278" horizontalCenter="0"/>
		<mx:ComboBox x="167" y="106" width="111" dataProvider="{places}" fontFamily="Arial" fontSize="11" id="selPopupPlace"></mx:ComboBox>
	</mx:Panel>
	<mx:Script>
		<![CDATA[
			
import com.adobe.air.notification.Notification;
import com.adobe.air.notification.Purr;
private var purr:Purr;


import air.update.ApplicationUpdaterUI;
import air.update.events.UpdateEvent;

[Bindable]
private var appVersion:String;
private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI(); 

private function setApplicationVersion():void {
	var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
	var ns:Namespace = appXML.namespace();
	appVersion = appXML.ns::version;
}
		]]>
	</mx:Script>
</mx:WindowedApplication>
